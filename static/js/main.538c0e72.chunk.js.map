{"version":3,"sources":["interfaces/game-player.ts","games/four-row/tile.ts","lib/helpers.ts","agents/random.ts","agents/human.ts","agents/mcts.ts","agents/alpha.ts","components/game/index.tsx","components/game/hooks.ts","lib/xos.ts","games/four-row/rules.ts","games/four-row/network.ts","lib/batcher.ts","games/four-row/model.ts","games/four-row/component/Tile.tsx","games/four-row/component/index.tsx","games/four-row/index.ts","components/app/index.tsx","serviceWorker.ts","index.tsx"],"names":["GamePlayerType","Tile","indexSoftMax","numbers","softer","softMaxed","boost","exps","map","value","Math","exp","sum","reduce","a","b","softMax","bound","random","total","index","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","randomOf","items","floor","length","sleep","ms","Promise","resolve","setTimeout","Random","gameRules","Object","classCallCheck","this","gameState","init","availables","action","step","gameStepResult","state","Human","humanAction","defaultPredictor","_ref","asyncToGenerator","regenerator_default","mark","_callee","history","rewards","_action","_result","playerIndex","policy","i","prob","_availables","result","reward","wrap","_context","prev","t0","finish","actionsCount","includes","push","abrupt","stop","_x","apply","arguments","Node","options","visits","parent","stepResult","children","totalValue","meanValue","parentVisits","sqrt","isLeaf","values","node","sameAsParent","getBonus","iMax","x","arr","findBestLeaf","getHistory","concat","sign","propagate","Mcts","predict","planCount","randomize","root","rootHistory","plan","child","_this","find","_iterator2","_iteratorNormalCompletion2","_step2","expand","modelPredictor","model","url","modelLoaded","load","sent","Alpha","mcts","act","Game","props","Component","game","_useGame","_useState","useState","rules","_useState2","slicedToArray","setGameState","_useState3","_useState4","status","setStatus","isRunningRef","useRef","actionResolveRef","onAction","useCallback","current","start","players","agents","player","type","createModel","run","isDone","_i","agent","useGame","isRunning","gamePlayers","defaultPlayers","playersCount","setPlayers","react_default","createElement","className","title","j","key","onChange","e","newPlayerIndex","target","newPlayers","slice","splice","name","onClick","preventDefault","getWinner1D","row","sameCount","nextValues","every","other","slice2D","board","position","objectSpread","Rules","Error","copy","playerTile","_actionToIJ","actionToIJ","_actionToIJ2","actionI","actionJ","winner","rows","width","heigth","columns","Array","from","keys","_didIteratorError2","_iteratorError2","column","rightDiagsTop","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","diag","rightDiagsBottom","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","leftDiagsTop","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","leftDiagsBottom","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","getWinner2D","actions","Empty","residual","input","network","tf","conv2d","kernelSize","filters","strides","padding","batchNormalization","leakyReLU","add","Network","historyDepth","useColor","compile","inputs","outputs","xsTensor","policiesTensor","output","rewardsTensor","ysTensors","fit","batchSize","epochs","shuffle","callbacks","onEpochEnd","console","log","trainingHistory","dispose","loss","numEpochs","inputsTensor","array","policies","save","optimizer","sgd","metrics","colorDepth","depth","shape","maxPooling2d","poolSize","flatten","dense","units","softmax","Batcher","func","size","wait","onFull","queue","race","batchFull","item","forEach","callBatch","_this2","getInput","states","lastState","enemyIndex","X","O","enemyTile","_loop","_loop2","color","playerHistory","filter","reverse","enemyHistory","emptyPlayerHistory","emptyEnemyHistory","emptyPlayerHistoryLength","max","emptyEnemyHistoryLength","n","hash","join","getSymHistories","symHistories","getStates","initial","last","getOutput","policyOutput","rewardOutput","networkPredictor","Model","gameName","parallel","batcher","gameHistories","pairs","gameHistory","pop","layerStates","_getInput","lastPlayerIndex","pair","location","window","startsWith","call","viewBox","y","height","cx","cy","r","TileNumber","tile","rx","ry","four_row_component_Tile","FourRow","App","gameRef","components_game","Boolean","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.538c0e72.chunk.js","sourcesContent":["enum GamePlayerType {\r\n    Human,\r\n    Alpha,\r\n    Random,\r\n    Mcts\r\n}\r\n\r\nexport default interface GamePlayer {\r\n    type: GamePlayerType;\r\n    name?: string;\r\n    url?: string;\r\n    planCount?: number;\r\n};\r\n\r\nexport {\r\n    GamePlayerType\r\n}","enum Tile {\r\n    Empty,\r\n    X,\r\n    O\r\n}\r\n\r\nexport default Tile;\r\n","const indexMax = (numbers: number[]) =>\r\n    numbers.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);\r\n\r\nconst softMax = (numbers: number[], softer?: boolean) => {\r\n    const boost = softer ? 10 : 100;\r\n    const exps = numbers.map(value => Math.exp(value * boost));\r\n    const sum = exps.reduce((a, b) => a + b, 0);\r\n    return exps.map(exp => exp / sum);\r\n};\r\n\r\nconst indexSoftMax = (numbers: number[], softer?: boolean) => {\r\n    const softMaxed = softMax(numbers, softer);\r\n    const bound = Math.random();\r\n    let total = 0;\r\n    let index = 0;\r\n    for (let value of softMaxed) {\r\n        total += value;\r\n        if (total >= bound) {\r\n            break;\r\n        }\r\n        index += 1;\r\n    }\r\n    return index;\r\n};\r\n\r\nconst randomOf = <T>(items: T[]) => {\r\n    const index = Math.floor(Math.random() * items.length);\r\n    return items[index];\r\n};\r\n\r\nconst sleep = (ms: number) => new Promise(\r\n    (resolve: () => void) => setTimeout(resolve, ms)\r\n);\r\n\r\nconst durationHR = (ms: number) => {\r\n    const numberEnding = (num: number) => (num > 1) ? 's' : '';\r\n\r\n    let temp = Math.floor(ms / 1000);\r\n    const years = Math.floor(temp / 31536000);\r\n    if (years) {\r\n        return years + ' year' + numberEnding(years);\r\n    }\r\n\r\n    const days = Math.floor((temp %= 31536000) / 86400);\r\n    if (days) {\r\n        return days + ' day' + numberEnding(days);\r\n    }\r\n    const hours = Math.floor((temp %= 86400) / 3600);\r\n    if (hours) {\r\n        return hours + ' hour' + numberEnding(hours);\r\n    }\r\n    const minutes = Math.floor((temp %= 3600) / 60);\r\n    if (minutes) {\r\n        return minutes + ' minute' + numberEnding(minutes);\r\n    }\r\n    const seconds = temp % 60;\r\n    if (seconds) {\r\n        return seconds + ' second' + numberEnding(seconds);\r\n    }\r\n    return 'less than a second';\r\n};\r\n\r\nexport {\r\n    indexMax,\r\n    randomOf,\r\n    indexSoftMax,\r\n    sleep,\r\n    durationHR\r\n};\r\n","import Agent from '../interfaces/agent';\r\nimport GameRules from '../interfaces/game-rules';\r\nimport GameState from '../interfaces/game-state';\r\nimport { randomOf } from '../lib/helpers';\r\n\r\nexport default class Random implements Agent{\r\n    private gameRules: GameRules;\r\n    private gameState: GameState\r\n    constructor(gameRules: GameRules) {\r\n        this.gameRules = gameRules;\r\n        this.gameState = gameRules.init();\r\n    }\r\n    async act() {\r\n        const availables = this.gameRules.availables(this.gameState);\r\n        const action = randomOf(availables);\r\n        this.step(action);\r\n        return action;\r\n    }\r\n    step(action: number) {\r\n        const gameStepResult = this.gameRules.step(this.gameState, action);\r\n        this.gameState = gameStepResult.state;\r\n    }\r\n    init() {\r\n        this.gameState = this.gameRules.init();\r\n    }\r\n}","import Agent from '../interfaces/agent';\r\n\r\nexport default class Human implements Agent{\r\n    private humanAction: () => Promise<number>;\r\n    constructor(humanAction: () => Promise<number>) {\r\n        this.humanAction = humanAction;\r\n    }\r\n    act() {\r\n        return this.humanAction();\r\n    }\r\n    step() {\r\n    }\r\n    init() {\r\n    }\r\n}","import Agent from '../interfaces/agent';\r\nimport GameRules from '../interfaces/game-rules';\r\nimport GamePrediction from '../interfaces/game-prediction';\r\nimport { randomOf, indexMax, indexSoftMax } from '../lib/helpers';\r\nimport StepResult from '../interfaces/game-step-result';\r\n\r\n// const bonusScale = 5;\r\nconst bonusScale = 1;\r\n\r\ntype Predictor = (history: number[]) => Promise<GamePrediction>;\r\n\r\ninterface MctsOptions {\r\n    gameRules: GameRules;\r\n    predict?: Predictor;\r\n    planCount?: number;\r\n    randomize?: boolean;\r\n}\r\n\r\nconst defaultPredictor = (gameRules: GameRules) => {\r\n    return async (history: number[]) => {\r\n        let state = gameRules.init();\r\n        let done = false;\r\n        let rewards = [] as number[];\r\n        for (let action of history) {\r\n            const result = gameRules.step(state, action);\r\n            ({ state, done } = result);\r\n        }\r\n        const playerIndex = state.playerIndex;\r\n        const policy = [] as number[];\r\n        const availables = gameRules.availables(state);\r\n        for (let i = 0; i < gameRules.actionsCount; i++) {\r\n            const prob = availables.includes(i + 1) ?\r\n                1 / availables.length : 0;\r\n            policy.push(prob);\r\n        }\r\n        while (!done) {\r\n            const availables = gameRules.availables(state);\r\n            const action = randomOf(availables);\r\n            const result = gameRules.step(state, action);\r\n            ({ state, done, rewards } = result);\r\n        }\r\n        const reward = rewards[playerIndex];\r\n        return {\r\n            policy,\r\n            reward\r\n        };\r\n    };\r\n};\r\n\r\ninterface NodeOptions {\r\n    parent: Node | null;\r\n    action: number;\r\n    prob: number;\r\n    stepResult: StepResult;\r\n}\r\n\r\nclass Node {\r\n    visits: number;\r\n    parent: Node | null;\r\n    action: number;\r\n    prob: number;\r\n    stepResult: StepResult;\r\n    children: Node[] = [];\r\n    totalValue = 0;\r\n    meanValue = 0;\r\n    constructor(options: NodeOptions) {\r\n        this.visits = 0;\r\n        this.parent = options.parent;\r\n        this.action = options.action;\r\n        this.prob = options.prob;\r\n        this.stepResult = options.stepResult;\r\n    }\r\n    isLeaf() {\r\n        return !this.children.length;\r\n    }\r\n    getBonus() {\r\n        const parentVisits = this.parent ?\r\n            this.parent.visits : this.visits;\r\n        const prob = this.prob;\r\n        const bonus = bonusScale * prob * Math.sqrt(\r\n            parentVisits\r\n        ) / ( this.visits + 1 );\r\n        return bonus;\r\n    }\r\n    sameAsParent() {\r\n        if (!this.parent) {\r\n            return false;\r\n        } else {\r\n            const parentPlayerIndex =\r\n                this.parent.stepResult.state.playerIndex;\r\n            const playerIndex = this.stepResult.state.playerIndex;\r\n            return parentPlayerIndex === playerIndex;\r\n        }\r\n    }\r\n    findBestLeaf(): Node {\r\n        if (this.isLeaf()) {\r\n            return this;\r\n        }\r\n        const values = this.children.map(node => {\r\n            const sign = node.sameAsParent() ? 1 : -1;\r\n            const value = sign * node.meanValue +\r\n                node.getBonus();\r\n            return value;\r\n        });\r\n        const bestChild = this.children[indexMax(values)];\r\n        return bestChild.findBestLeaf();\r\n    }\r\n    getHistory(): number[] {\r\n        if (!this.parent) {\r\n            return [];\r\n        }\r\n        return this.parent.getHistory().concat(this.action);\r\n    }\r\n    propagate(value: number) {\r\n        this.visits += 1;\r\n        this.totalValue += value;\r\n        this.meanValue = this.totalValue / this.visits;\r\n        if (this.parent) {\r\n            const sign = this.sameAsParent() ? 1 : -1;\r\n            this.parent.propagate(value * sign);\r\n        }\r\n    }\r\n};\r\n\r\nexport default class Mcts implements Agent{\r\n    private gameRules: GameRules;\r\n    private predict: Predictor;\r\n    private planCount: number;\r\n    private randomize: boolean;\r\n    private root: Node;\r\n    private rootHistory: number[];\r\n    constructor(options: MctsOptions) {\r\n        this.gameRules = options.gameRules;\r\n        this.predict = options.predict ?\r\n            options.predict : defaultPredictor(this.gameRules);\r\n        this.planCount = options.planCount ?\r\n            options.planCount : 100;\r\n        this.randomize = !!options.randomize;\r\n        this.root = new Node({\r\n            parent: null,\r\n            action: 0,\r\n            prob: 1,\r\n            stepResult: {\r\n                done: false,\r\n                rewards: [],\r\n                state: this.gameRules.init()\r\n            }\r\n        });\r\n        this.rootHistory = [];\r\n    }\r\n    async act() {\r\n        await this.plan();\r\n        const policy = this.root.children.map(\r\n            child => child.visits / this.root.visits\r\n        );\r\n        const index = indexSoftMax(policy, this.randomize);\r\n        const action = this.root.children[index].action;\r\n        this.step(action);\r\n        return action;\r\n    }\r\n    step(action: number) {\r\n        const child = this.root.children.find(\r\n            node => node.action === action\r\n        );\r\n        if (child) {\r\n            this.root = child;\r\n            this.root.parent = null;\r\n        } else {\r\n            const stepResult = this.gameRules.step(\r\n                this.root.stepResult.state,\r\n                action\r\n            );\r\n            this.root = new Node({\r\n                parent: null,\r\n                action,\r\n                prob: 1,\r\n                stepResult\r\n            });\r\n        }\r\n        this.rootHistory.push(action);\r\n    }\r\n    init() {\r\n        this.root = new Node({\r\n            parent: null,\r\n            action: 0,\r\n            prob: 1,\r\n            stepResult: {\r\n                done: false,\r\n                rewards: [],\r\n                state: this.gameRules.init()\r\n            }\r\n        });\r\n        this.rootHistory = [];\r\n    }\r\n    async expand(node: Node) {\r\n        const history = this.rootHistory.concat(\r\n            node.getHistory()\r\n        );\r\n        const { reward, policy } = await this.predict(history);\r\n        const availables = this.gameRules.availables(\r\n            node.stepResult.state\r\n        );\r\n        for (let action of availables) {\r\n            const prob = policy[action - 1];\r\n            const stepResult = this.gameRules.step(\r\n                node.stepResult.state,\r\n                action\r\n            );\r\n            const child = new Node({\r\n                action,\r\n                prob,\r\n                stepResult,\r\n                parent: node\r\n            });\r\n            node.children.push(child);\r\n        }\r\n        return reward;\r\n    }\r\n    async plan() {\r\n        for (let i = 0; i < this.planCount; i++) {\r\n            const node = this.root.findBestLeaf();\r\n            let value = 0;\r\n            if (node.stepResult.done) {\r\n                const reward = node.stepResult.rewards[\r\n                    node.stepResult.state.playerIndex\r\n                ];\r\n                value = reward;\r\n            } else {\r\n                value = await this.expand(node);\r\n            }\r\n            node.propagate(value);\r\n        }\r\n    }\r\n}","import Agent from '../interfaces/agent';\r\nimport GameRules from '../interfaces/game-rules';\r\nimport GameModel from '../interfaces/game-model';\r\nimport Mcts from './mcts';\r\n\r\ninterface AlphaOptions {\r\n    gameRules: GameRules;\r\n    model: GameModel;\r\n    url?: string;\r\n    planCount?: number;\r\n    randomize?: boolean;\r\n}\r\n\r\nconst modelPredictor = (model: GameModel, url?: string) => {\r\n    let modelLoaded = !url;\r\n    return async(history: number[]) => {\r\n        if (!modelLoaded && url) {\r\n            await model.load(url);\r\n            modelLoaded = true;\r\n        }\r\n        return await model.predict(history);\r\n    };\r\n};\r\n\r\nexport default class Alpha implements Agent {\r\n    private mcts: Mcts;\r\n    constructor(options: AlphaOptions) {\r\n        this.mcts = new Mcts({\r\n            gameRules: options.gameRules,\r\n            predict: modelPredictor(options.model, options.url),\r\n            planCount: options.planCount,\r\n            randomize: options.randomize\r\n        });\r\n    }\r\n    act() {\r\n        return this.mcts.act();\r\n    }\r\n    init() {\r\n        return this.mcts.init();\r\n    }\r\n    step(action: number) {\r\n        return this.mcts.step(action);\r\n    }\r\n};","import React, { useState } from 'react';\r\nimport './Game.css';\r\nimport GameInterface from '../../interfaces/game';\r\nimport { useGame } from './hooks';\r\nimport GamePlayer, { GamePlayerType } from '../../interfaces/game-player';\r\n\r\ninterface GameProps {\r\n    game: GameInterface;\r\n}\r\n\r\nconst Game: React.FC<GameProps> = (props) => {\r\n    const Component = props.game.Component;\r\n    const {\r\n        gameState,\r\n        status,\r\n        onAction,\r\n        start,\r\n        stop\r\n    } = useGame(props.game);\r\n    const isRunning = status.includes('turn');\r\n    const gamePlayers = props.game.players.find(\r\n        player => player.type === GamePlayerType.Human\r\n    ) ? props.game.players : [{\r\n        type: GamePlayerType.Human\r\n    } as GamePlayer].concat(props.game.players);\r\n    const defaultPlayers = [0];\r\n    const playersCount = 2;\r\n\r\n    for (let i = 1; i <= playersCount - 1; i++) {\r\n        defaultPlayers.push(gamePlayers.length - 1);\r\n    }\r\n\r\n    const [ players, setPlayers ] = useState(defaultPlayers);\r\n\r\n    return (\r\n        <div className={'Game'}>\r\n            <h2>\r\n                {props.game.title}\r\n            </h2>\r\n            <Component\r\n                gameState={gameState}\r\n                onAction={onAction}\r\n            />\r\n            <div className={'Game-status'}>\r\n                <p className={'Game-text'}>\r\n                    {status}\r\n                </p>\r\n            </div>\r\n            <div className={'Game-controls'}>\r\n                <div>\r\n                    {players.map((playerIndex, j) => (\r\n                        <div\r\n                            className={'Game-select'}\r\n                            key={j}\r\n                        >\r\n                            <p className={'Game-text'}>\r\n                                {`Player ${j + 1}:`}\r\n                            </p>\r\n                            <select\r\n                                value={playerIndex}\r\n                                onChange={e => {\r\n                                    const newPlayerIndex = +e.target.value;\r\n                                    setPlayers(players => {\r\n                                        const newPlayers = players.slice();\r\n                                        newPlayers.splice(\r\n                                            j, 1, newPlayerIndex\r\n                                        );\r\n                                        return newPlayers;\r\n                                    });\r\n                                }}\r\n                            >\r\n                                {gamePlayers.map((player, i) => (\r\n                                    <option\r\n                                        key={i}\r\n                                        value={i}\r\n                                    >\r\n                                        {\r\n                                            player.name ||\r\n                                            GamePlayerType[player.type]\r\n                                        }\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                {isRunning ? \r\n                    <button\r\n                        className={'Game-button'}\r\n                        onClick={e => {\r\n                            e.preventDefault();\r\n                            stop();\r\n                        }}\r\n                    >\r\n                        <p className={'Game-text'}>\r\n                            {'Stop'}\r\n                        </p>\r\n                    </button> :\r\n                    <button\r\n                        className={'Game-button'}\r\n                        onClick={e => {\r\n                            e.preventDefault();\r\n                            start(players.map(index => gamePlayers[index]));\r\n                        }}\r\n                    >\r\n                        <p className={'Game-text'}>\r\n                            {'Start'}\r\n                        </p>\r\n                    </button>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","import { useState, useCallback, useRef } from 'react';\r\nimport Game from '../../interfaces/game';\r\nimport GamePlayer, { GamePlayerType } from '../../interfaces/game-player';\r\nimport Random from '../../agents/random';\r\nimport Human from '../../agents/human';\r\nimport Agent from '../../interfaces/agent';\r\nimport Mcts from '../../agents/mcts';\r\nimport { sleep } from '../../lib/helpers';\r\nimport Alpha from '../../agents/alpha';\r\n\r\ntype ActionResolve = ((action: number) => void) | null; \r\n\r\nconst useGame = (game: Game) => {\r\n    const [ gameState, setGameState ] = useState(game.rules.init());\r\n    const [ status, setStatus ] = useState('Choose players and start');\r\n    const isRunningRef = useRef(false);\r\n    const actionResolveRef = useRef<ActionResolve>(null);\r\n    const onAction = useCallback((action: number) => {\r\n        if (actionResolveRef.current) {\r\n            actionResolveRef.current(action);\r\n            actionResolveRef.current = null;\r\n        }\r\n    }, []);\r\n    const humanAction = useCallback(() => {\r\n        return new Promise((resolve: ActionResolve) => {\r\n            actionResolveRef.current = resolve\r\n        });\r\n    }, []);\r\n    const start = useCallback((players: GamePlayer[]) => {\r\n        const agents = players.map(player => {\r\n            switch (player.type) {\r\n                case GamePlayerType.Random: {\r\n                    return new Random(game.rules);\r\n                }\r\n                case GamePlayerType.Mcts: {\r\n                    return new Mcts({\r\n                        gameRules: game.rules,\r\n                        planCount: player.planCount\r\n                    });\r\n                }\r\n                case GamePlayerType.Alpha: {\r\n                    return new Alpha({\r\n                        gameRules: game.rules,\r\n                        planCount: player.planCount,\r\n                        model: game.createModel(),\r\n                        url: player.url\r\n                    });\r\n                }\r\n                case GamePlayerType.Human: {\r\n                    return new Human(humanAction);\r\n                }\r\n            }\r\n            return new Random(game.rules);\r\n        }) as Agent[];\r\n        const run = async () => {\r\n            let gameState = game.rules.init();\r\n            setGameState(gameState);\r\n            let isDone = false;\r\n            let rewards = [] as number[];\r\n            for(let i = 1; !isDone && isRunningRef.current; i++) {\r\n                setStatus(`Player ${gameState.playerIndex + 1}'s turn`);\r\n                await sleep(1);\r\n                const action = await agents[gameState.playerIndex].act();\r\n                const gameStepResult = game.rules.step(\r\n                    gameState, action\r\n                );\r\n                for (let i in agents) {\r\n                    const agent = agents[i];\r\n                    const index = +i;\r\n                    if (index !== gameState.playerIndex) {\r\n                        agent.step(action);\r\n                    }\r\n                }\r\n                gameState = gameStepResult.state;\r\n                setGameState(gameState);\r\n                isDone = gameStepResult.done;\r\n                rewards = gameStepResult.rewards;\r\n            }\r\n            switch (rewards[0]) {\r\n                case (1): {\r\n                    setStatus('Player 1 won');\r\n                    break;\r\n                }\r\n                case (-1): {\r\n                    setStatus('Player 2 won');\r\n                    break;\r\n                }\r\n                default: {\r\n                    setStatus(`It's a tie`);\r\n                }\r\n            }\r\n            isRunningRef.current = false;\r\n        };\r\n        isRunningRef.current = true;\r\n        run();\r\n    }, [game, humanAction]);\r\n\r\n    const stop = useCallback(() => {\r\n        isRunningRef.current = false;\r\n    }, []);\r\n\r\n    return {\r\n        gameState,\r\n        status,\r\n        onAction,\r\n        start,\r\n        stop\r\n    };\r\n};\r\n\r\nexport { useGame };","const getWinner1D = (row: number[], sameCount: number) => {\r\n    if (row.length < sameCount) {\r\n        return 0;\r\n    }\r\n    const winner = row.find(\r\n        (value, index) => {\r\n            if (!value) {\r\n                return false\r\n            }\r\n            const nextValues = row.slice(index, index + sameCount);\r\n            return nextValues.length === sameCount &&\r\n                nextValues\r\n                    .every(other => other === value);\r\n        }\r\n    );\r\n    return winner || 0;\r\n}\r\n\r\ninterface Point {\r\n    i: number;\r\n    j: number;\r\n}\r\n\r\nconst slice2D = (board: number[][], start: Point, step: Point) => {\r\n    const row = [];\r\n    let position = {...start};\r\n    while (true) {\r\n        if (board[position.i] === undefined) break;\r\n        const value = board[position.i][position.j];\r\n        if (value === undefined) break;\r\n        row.push(value);\r\n        position = {\r\n            i: position.i + step.i,\r\n            j: position.j + step.j\r\n        }\r\n    }\r\n    return row;\r\n};\r\n\r\nconst getWinner2D = (board: number[][], sameCount: number) => {\r\n    const rows = board;\r\n    for (let row of rows) {\r\n        const winner = getWinner1D(row, sameCount);\r\n        if (winner) return winner;\r\n    }\r\n\r\n    const width = board[0].length;\r\n    const heigth = board.length;\r\n\r\n    const columns = Array.from(Array(width).keys())\r\n        .map(j => slice2D(board, {i: 0, j}, {i: 1, j: 0}));\r\n    for (let column of columns) {\r\n        const winner = getWinner1D(column, sameCount);\r\n        if (winner) return winner;\r\n    }\r\n\r\n    const rightDiagsTop = Array.from(Array(width).keys())\r\n        .map(j => slice2D(board, {i: 0, j}, {i: 1, j: 1}));\r\n    for (let diag of rightDiagsTop) {\r\n        const winner = getWinner1D(diag, sameCount);\r\n        if (winner) return winner;\r\n    }\r\n\r\n    const rightDiagsBottom = Array.from(Array(heigth).keys())\r\n        .slice(1)\r\n        .map(i => slice2D(board, {i, j: 0}, {i: 1, j: 1}));\r\n    for (let diag of rightDiagsBottom) {\r\n        const winner = getWinner1D(diag, sameCount);\r\n        if (winner) return winner;\r\n    }\r\n\r\n    const leftDiagsTop = Array.from(Array(width).keys())\r\n        .map(j => slice2D(board, {i: 0, j}, {i: 1, j: -1}));\r\n    for (let diag of leftDiagsTop) {\r\n        const winner = getWinner1D(diag, sameCount);\r\n        if (winner) return winner;\r\n    }\r\n\r\n    const leftDiagsBottom = Array.from(Array(heigth).keys())\r\n        .slice(1)\r\n        .map(i => slice2D(board, {i, j: width - 1}, {i: 1, j: -1}));\r\n    for (let diag of leftDiagsBottom) {\r\n        const winner = getWinner1D(diag, sameCount);\r\n        if (winner) return winner;\r\n    }\r\n\r\n    return 0;\r\n};\r\n\r\nexport {\r\n    getWinner1D,\r\n    getWinner2D\r\n};","import GameRules from '../../interfaces/game-rules';\r\nimport Action from './action';\r\nimport Tile from './tile';\r\nimport Board from './board';\r\nimport State from './state';\r\nimport { getWinner2D } from '../../lib/xos';\r\n\r\nconst actionToIJ = (board: Board, action: Action) => {\r\n    const j = action - 1;\r\n    let i = 5;\r\n    while (board[i][j] !== 0 && i >= 0) {\r\n        i--;\r\n    }\r\n    return [i, j];\r\n};\r\n\r\nconst copy = (board: Board) => board.map(row => row.slice()) as Board;\r\n\r\nexport default class Rules implements GameRules {\r\n    step(state: State, action: Action) {\r\n        if (!this.availables(state).includes(action)){\r\n            throw new Error('bad action!');\r\n        }\r\n        const board = copy(state.board);\r\n        const playerTile = state.playerIndex + 1;\r\n        const [ actionI, actionJ ] = actionToIJ(board, action);\r\n        board[actionI][actionJ] = playerTile;\r\n        const winner = getWinner2D(board, 4);\r\n        const done = (!!winner ||\r\n            this.availables({\r\n                board,\r\n                playerIndex: -1\r\n            }).length === 0\r\n        );\r\n        const rewards = [0, 0];\r\n        if (winner) {\r\n            rewards[state.playerIndex] = 1;\r\n            rewards[1 - state.playerIndex] = -1;\r\n        }\r\n        const newPlayerIndex = done ?\r\n            state.playerIndex : 1 - state.playerIndex;\r\n        const newState = {\r\n            board,\r\n            playerIndex: newPlayerIndex\r\n        };\r\n        const gameStepResult = {\r\n            done,\r\n            rewards,\r\n            state: newState\r\n        };\r\n        return gameStepResult;\r\n    }\r\n    availables(state: State) {\r\n        const actions = [] as Action[];\r\n        const board = state.board;\r\n        for (let j = 0; j < 7; j++) {\r\n            if (board[0][j] === Tile.Empty) {\r\n                actions.push(j + 1);\r\n            }\r\n        }\r\n        return actions;\r\n    }\r\n    init() {\r\n        const board = [\r\n            [Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty],\r\n            [Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty],\r\n            [Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty],\r\n            [Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty],\r\n            [Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty],\r\n            [Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty, Tile.Empty]\r\n        ] as Board;\r\n        const playerIndex = 0;\r\n        return {board, playerIndex};\r\n    }\r\n    actionsCount = 7\r\n}","import * as tf from '@tensorflow/tfjs';\r\n\r\nconst numFilters = 70;\r\nconst numLayers = 1;\r\nconst numEpochs = 40;\r\n\r\ninterface Options {\r\n    historyDepth: number;\r\n    useColor: boolean;\r\n}\r\n\r\nconst residual = ( input: tf.SymbolicTensor ) => {\r\n    let network = tf.layers.conv2d({\r\n        kernelSize: 3,\r\n        filters: numFilters,\r\n        strides: 1,\r\n        padding: 'same',\r\n        // kernelInitializer: 'VarianceScaling',\r\n        // kernelRegularizer: 'l1l2'\r\n    }).apply(input) as tf.SymbolicTensor;\r\n\r\n    network = tf.layers.batchNormalization()\r\n        .apply(network) as tf.SymbolicTensor;\r\n\r\n    network = tf.layers.leakyReLU()\r\n        .apply(network) as tf.SymbolicTensor;\r\n\r\n    network = tf.layers.conv2d({\r\n        kernelSize: 3,\r\n        filters: numFilters,\r\n        strides: 1,\r\n        padding: 'same',\r\n        // kernelInitializer: 'VarianceScaling',\r\n        // kernelRegularizer: 'l1l2'\r\n    }).apply(input) as tf.SymbolicTensor;\r\n\r\n    network = tf.layers.batchNormalization()\r\n        .apply(network) as tf.SymbolicTensor;\r\n\r\n    network = tf.layers.add()\r\n        .apply([network, input]) as tf.SymbolicTensor;;\r\n\r\n    network = tf.layers.leakyReLU()\r\n        .apply(network) as tf.SymbolicTensor;;\r\n\r\n\r\n    return network;\r\n};\r\n\r\nexport default class Network {\r\n    private model: tf.LayersModel;\r\n    private historyDepth: number;\r\n    private useColor: boolean;\r\n    constructor(options: Options) {\r\n        this.historyDepth = options.historyDepth;\r\n        this.useColor = options.useColor;\r\n        this.model = this.createModel();\r\n        this.compile();\r\n    }\r\n    async fit(\r\n        inputs: number[][][][],\r\n        outputs: [number[], number[]][]\r\n    ){\r\n        // const batchSize = inputs.length;\r\n        const xsTensor = tf.tensor4d(inputs);\r\n        const policiesTensor = tf.tensor2d(outputs.map(\r\n            output => output[0]\r\n        ));\r\n        const rewardsTensor = tf.tensor2d(outputs.map(\r\n            output => output[1]\r\n        ));\r\n        const ysTensors = [\r\n            policiesTensor,\r\n            rewardsTensor\r\n        ];\r\n\r\n        const trainingHistory = await this.model.fit(\r\n            xsTensor,\r\n            ysTensors,\r\n            {\r\n                batchSize: 128,\r\n                epochs: numEpochs,\r\n                shuffle: true,\r\n                // validationSplit: 0.01,\r\n                callbacks: {\r\n                    onEpochEnd: console.log\r\n                }\r\n            }\r\n        );\r\n\r\n        xsTensor.dispose();\r\n        policiesTensor.dispose();\r\n        rewardsTensor.dispose();\r\n        console.log(trainingHistory);\r\n        const loss = trainingHistory.history.loss[numEpochs - 1] as number;\r\n        return loss;\r\n    }\r\n    async predict(inputs: number[][][][]) {\r\n        const inputsTensor = tf.tensor4d(inputs);\r\n        const [ policiesTensor, rewardsTensor ] = this.model.predict(\r\n            inputsTensor\r\n        ) as [tf.Tensor2D, tf.Tensor2D];\r\n        const policies = await policiesTensor.array();\r\n        const rewards = await rewardsTensor.array();\r\n\r\n        inputsTensor.dispose();\r\n        policiesTensor.dispose();\r\n        rewardsTensor.dispose();\r\n\r\n        const outputs = policies.map(\r\n            (policy, i) => [policy, rewards[i]] as [number[], number[]]\r\n        );\r\n        return outputs;\r\n    }\r\n    async save(url: string) {\r\n        await this.model.save(url);\r\n    }\r\n    async load(url: string) {\r\n        this.model = await tf.loadLayersModel(url);\r\n        this.compile();\r\n    }\r\n    private compile() {\r\n        // const optimizer = tf.train.adam();\r\n        const optimizer = tf.train.sgd(0.1);\r\n\r\n        this.model.compile({\r\n            optimizer: optimizer,\r\n            loss: [\r\n                'categoricalCrossentropy',\r\n                'categoricalCrossentropy'\r\n            ],\r\n            metrics: ['accuracy']\r\n        });\r\n    }\r\n    private createModel(){\r\n        const colorDepth = this.useColor ? 1 : 0;\r\n        const depth = this.historyDepth * 2 + colorDepth;\r\n        console.log(depth);\r\n        const input = tf.input({\r\n            shape: [6, 7, depth]\r\n        });\r\n\r\n        let network = input;\r\n\r\n        network = tf.layers.conv2d({\r\n            kernelSize: 3,\r\n            filters: numFilters,\r\n            padding: 'same',\r\n            strides: 1,\r\n        }).apply(network) as tf.SymbolicTensor;\r\n        network = tf.layers.batchNormalization()\r\n            .apply(network) as tf.SymbolicTensor;\r\n        network = tf.layers.leakyReLU()\r\n            .apply(network) as tf.SymbolicTensor;\r\n\r\n        for (let i = 0; i < numLayers; i++) {\r\n            network = residual(network)\r\n        }\r\n\r\n        let policy = tf.layers.conv2d({\r\n            kernelSize: 1,\r\n            filters: 2,\r\n            strides: 1,\r\n            padding: 'same'\r\n        }).apply(network) as tf.SymbolicTensor;\r\n        policy = tf.layers.batchNormalization()\r\n            .apply(policy) as tf.SymbolicTensor;\r\n        policy = tf.layers.leakyReLU()\r\n            .apply(policy) as tf.SymbolicTensor;\r\n\r\n        // policy = tf.layers.conv2d({\r\n        //     kernelSize: [6, 1],\r\n        //     filters: 1\r\n        // }).apply(network) as tf.SymbolicTensor;\r\n        // policy = tf.layers.batchNormalization()\r\n        //     .apply(policy) as tf.SymbolicTensor;\r\n        // policy = tf.layers.leakyReLU()\r\n        //     .apply(policy) as tf.SymbolicTensor;\r\n        // policy = tf.layers.flatten()\r\n        //     .apply(policy) as tf.SymbolicTensor;\r\n        // policy = tf.layers.softmax()\r\n        //     .apply(policy) as tf.SymbolicTensor;\r\n\r\n\r\n        policy = tf.layers.maxPooling2d(\r\n            {\r\n                poolSize: [6, 1]\r\n            }\r\n        ).apply(policy) as tf.SymbolicTensor;\r\n        policy = tf.layers.batchNormalization()\r\n            .apply(policy) as tf.SymbolicTensor;\r\n        policy = tf.layers.flatten()\r\n            .apply(policy) as tf.SymbolicTensor;\r\n        policy = tf.layers.dense({\r\n            units: 7\r\n        }).apply(policy) as tf.SymbolicTensor;\r\n        policy = tf.layers.softmax()\r\n            .apply(policy) as tf.SymbolicTensor;\r\n\r\n        let reward = tf.layers.conv2d({\r\n            kernelSize: 1,\r\n            filters: 1,\r\n            strides: 1,\r\n            padding: 'same',\r\n        }).apply(network) as tf.SymbolicTensor;\r\n        reward = tf.layers.batchNormalization()\r\n            .apply(reward) as tf.SymbolicTensor;\r\n        reward = tf.layers.leakyReLU()\r\n            .apply(reward) as tf.SymbolicTensor;\r\n        reward = tf.layers.flatten()\r\n            .apply(reward) as tf.SymbolicTensor;\r\n        reward = tf.layers.dense({\r\n            units: 20\r\n        }).apply(reward) as tf.SymbolicTensor;\r\n        reward = tf.layers.batchNormalization()\r\n            .apply(reward) as tf.SymbolicTensor;\r\n        reward = tf.layers.leakyReLU()\r\n            .apply(reward) as tf.SymbolicTensor;\r\n        reward = tf.layers.dense({\r\n            units: 3\r\n        }).apply(reward) as tf.SymbolicTensor;\r\n        reward = tf.layers.softmax()\r\n            .apply(reward) as tf.SymbolicTensor;\r\n\r\n        const model = tf.model(\r\n            {\r\n                inputs: input,\r\n                outputs: [\r\n                    policy,\r\n                    reward\r\n                ]\r\n            }\r\n        );\r\n        return model;\r\n    };\r\n};","import { sleep } from \"./helpers\";\r\n\r\ntype BatchFunc<I,O> = (inputs: I[]) => Promise<O[]>;\r\ninterface Item<I,O> {\r\n    input: I;\r\n    resolve: (output: O) => void;\r\n}\r\n\r\nexport default class Batcher<I,O> {\r\n    private func: BatchFunc<I,O>;\r\n    private size: number;\r\n    private wait: number;\r\n    private onFull: (() => void) | null = null;\r\n    private queue: Item<I,O>[] = [];\r\n    constructor(func: BatchFunc<I,O>, size: number, wait: number) {\r\n        this.func = func;\r\n        this.size = size;\r\n        this.wait = wait;\r\n    }\r\n    private batchFull() {\r\n        return new Promise((resolve: () => void) => {\r\n            this.onFull = resolve;\r\n        });\r\n    }\r\n    private async callBatch() {\r\n        await Promise.race([\r\n            sleep(this.wait),\r\n            this.batchFull()\r\n        ]);\r\n        // console.log('batch:',this.queue.length);\r\n        const items = this.queue.slice();\r\n        this.queue = [];\r\n        this.onFull = null;\r\n        const inputs = items.map(item => item.input);\r\n        const outputs = await this.func(inputs);\r\n        items.forEach((item, i) => {\r\n            item.resolve(outputs[i]);\r\n        });\r\n    }\r\n    private add(item: Item<I,O>) {\r\n        this.queue.push(item);\r\n        if (this.queue.length === 1) {\r\n            this.callBatch();\r\n        }\r\n        if (this.queue.length === this.size) {\r\n            if (this.onFull) {\r\n                this.onFull();\r\n            }\r\n        }\r\n    }\r\n    call(input: I) {\r\n        return new Promise((resolve: (output: O) => void) => {\r\n            const item = {\r\n                input,\r\n                resolve\r\n            };\r\n            this.add(item);\r\n        });\r\n    }\r\n};","import GameModel from '../../interfaces/game-model';\r\nimport GameHistory from '../../interfaces/game-history';\r\nimport State from './state';\r\nimport Tile from './tile';\r\nimport Rules from './rules';\r\nimport Network from './network';\r\nimport Batcher from '../../lib/batcher';\r\n// import { indexMax } from '../../lib/helpers';\r\n\r\ntype Input = number[][][];\r\ntype Output = [number[], number[]];\r\n\r\ninterface Pair {\r\n    input: Input;\r\n    output: Output;\r\n};\r\n\r\nconst historyDepth = 2;\r\nconst useColor = true;\r\n\r\nconst getHash = (state: State) => {\r\n    return state.board\r\n        .map(row => row.join(''))\r\n        .join('');\r\n};\r\n\r\nconst getInput = (states: State[]) => {\r\n    const lastState = states[states.length - 1];\r\n    const playerIndex = lastState.playerIndex;\r\n    const enemyIndex = 1 - playerIndex;\r\n    const playerTile = playerIndex === 0 ? Tile.X : Tile.O;\r\n    const enemyTile = playerIndex === 1 ? Tile.X : Tile.O;\r\n\r\n    const input = [] as Input;\r\n\r\n    for (let i = 0; i < 6; i++) {\r\n        input.push([]);\r\n        for (let j = 0; j < 7; j++) {\r\n            input[i].push([]);\r\n            const color = 1 - playerIndex;\r\n            const playerHistory = states\r\n                .filter(state => state.playerIndex === enemyIndex)\r\n                .map(state => (\r\n                    state.board[i][j] === playerTile ? 1 : 0\r\n                ))\r\n                .reverse()\r\n                .slice(0, historyDepth) as number[];\r\n            const enemyHistory = states\r\n                .filter(state => state.playerIndex === playerIndex)\r\n                .map(state => (\r\n                    state.board[i][j] === enemyTile ? 1 : 0\r\n                ))\r\n                .reverse()\r\n                .slice(0, historyDepth) as number[];\r\n            const emptyPlayerHistory = [] as number[];\r\n            const emptyEnemyHistory = [] as number[];\r\n            const emptyPlayerHistoryLength = Math.max(\r\n                historyDepth - playerHistory.length, 0\r\n            );\r\n            const emptyEnemyHistoryLength = Math.max(\r\n                historyDepth - enemyHistory.length, 0\r\n            );\r\n            if (emptyPlayerHistoryLength) {\r\n                for (let n = 0; n < emptyPlayerHistoryLength; n++) {\r\n                    emptyPlayerHistory.push(0);\r\n                }\r\n            }\r\n            if (emptyEnemyHistoryLength) {\r\n                for (let n = 0; n < emptyEnemyHistoryLength; n++) {\r\n                    emptyEnemyHistory.push(0);\r\n                }\r\n            }\r\n            input[i][j] = playerHistory.concat(\r\n                emptyPlayerHistory,\r\n                enemyHistory,\r\n                emptyEnemyHistory,\r\n                useColor ? [color] : []\r\n            );\r\n        }\r\n    }\r\n    const hash = getHash(lastState);\r\n\r\n    return {\r\n        input,\r\n        hash\r\n    };\r\n};\r\n\r\nconst getSymHistories = (history: number[]) => {\r\n    const symHistories = [history];\r\n    symHistories.push(history.map(action => 8 - action));\r\n    return symHistories;\r\n};\r\n\r\nconst getStates = (history: number[], rules: Rules) => {\r\n    const initial = rules.init();\r\n    const states = [initial];\r\n    let last = initial;\r\n    for (let action of history) {\r\n        const { state } = rules.step(last, action);\r\n        states.push(state);\r\n        last = state;\r\n    }\r\n    return states;\r\n};\r\n\r\nconst getOutput = (reward: number, action: number) => {\r\n    const policyOutput = [] as number[];\r\n    const rewardOutput = [] as number[];\r\n    for (let i = 0; i < 7; i++) {\r\n        policyOutput[i] = 0;\r\n    }\r\n    for (let i = 0; i < 3; i++) {\r\n        rewardOutput[i] = 0;\r\n    }\r\n    policyOutput[action - 1] = 1;\r\n    rewardOutput[reward + 1] = 1;\r\n    return [policyOutput, rewardOutput] as Output;\r\n};\r\n\r\nconst networkPredictor = (network: Network) => {\r\n    return (inputs: Input[]) => {\r\n        return network.predict(inputs);\r\n    };\r\n};\r\n\r\nexport default class Model implements GameModel {\r\n    private rules: Rules;\r\n    private network: Network;\r\n    private gameName: string;\r\n    private batcher: Batcher<Input,Output> | null = null;\r\n    constructor(gameName: string, rules: Rules, parallel = false) {\r\n        this.gameName = gameName;\r\n        this.rules = rules;\r\n        this.network = new Network({\r\n            historyDepth,\r\n            useColor\r\n        });\r\n        if (parallel) {\r\n            this.batcher = new Batcher(\r\n                networkPredictor(this.network),\r\n                100,\r\n                10\r\n            );\r\n        }\r\n    }\r\n    async train(gameHistories: GameHistory[]) {\r\n        const inputs = [] as Input[];\r\n        const outputs = [] as Output[];\r\n        const pairs = [] as Pair[];\r\n        for (let gameHistory of gameHistories) {\r\n            const symHistories = getSymHistories(gameHistory.history);\r\n            for (let history of symHistories) {\r\n                const states = getStates(history, this.rules);\r\n                states.pop();\r\n                for (let i = 0; i < states.length; i++) {\r\n                    const layerStates = states.slice(0, i + 1);\r\n                    const { input } = getInput(layerStates);\r\n                    const lastState = states[i];\r\n                    const lastPlayerIndex = lastState.playerIndex;\r\n                    const reward = gameHistory.rewards[lastPlayerIndex];\r\n                    const action = gameHistory.history[i];\r\n                    const output = getOutput(reward, action);\r\n                    pairs.push({\r\n                        input,\r\n                        output\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        pairs.forEach(pair => {\r\n            inputs.push(pair.input);\r\n            outputs.push(pair.output)\r\n        });\r\n        console.log(`training data length: ${inputs.length}`);\r\n        const loss = await this.network.fit(inputs, outputs);\r\n        return loss < 0.5;\r\n    }\r\n    async save(name: string){\r\n        const location = window.location;\r\n        const url = `${location}api/${this.gameName}/model/${name}`;\r\n        await this.network.save(url);\r\n    }\r\n    async load(name: string){\r\n        const url = (name.startsWith('http')) ? name :\r\n            `${window.location}api/${this.gameName}` + \r\n            `/model/${name}/model.json`;\r\n        console.log(url);\r\n        await this.network.load(url);\r\n    }\r\n    async predict(history: number[]) {\r\n        const states = getStates(history, this.rules);\r\n        const { input } = getInput(states);\r\n        let output: Output;\r\n        if (!this.batcher) {\r\n            [output] = await this.network.predict([input]);\r\n        } else {\r\n            output = await this.batcher.call(input);\r\n        }\r\n        const [ policy, rewards ] = output;\r\n        const reward = rewards.reduce(\r\n            (total, prob, index) => total + prob * (index - 1),\r\n            0\r\n        );\r\n        return {\r\n            reward,\r\n            policy\r\n        };\r\n    }\r\n};","import React from 'react';\r\nimport './Tile.css';\r\nimport TileNumber from '../tile';\r\n\r\ninterface TileProps {\r\n    tile: TileNumber;\r\n    x: number;\r\n    y: number;\r\n    onClick: () => void;\r\n}\r\n\r\nconst Tile: React.FC<TileProps> = (props) => {\r\n    return (\r\n        <svg\r\n            viewBox={'0 0 10 10'}\r\n            x={props.x}\r\n            y={props.y}\r\n            width={10}\r\n            height={10}\r\n        >\r\n            <circle\r\n                cx={5}\r\n                cy={5}\r\n                r={3.5}\r\n                className={`Tile Tile--${TileNumber[props.tile]}`}\r\n                onClick={(e) => {\r\n                    e.preventDefault();\r\n                    props.onClick();\r\n                }}\r\n            />\r\n        </svg>\r\n    );\r\n};\r\n\r\nexport default Tile;\r\n","import React from 'react';\r\nimport State from '../state';\r\nimport './Component.css';\r\nimport Tile from './Tile';\r\nimport GameComponent from '../../../interfaces/game-component';\r\n\r\nconst Component: GameComponent = (props) => {\r\n    const state = props.gameState as State;\r\n\r\n    return (\r\n        <svg\r\n            className={'Component'}\r\n            viewBox={'0 0 70 60'}\r\n        >\r\n            <rect\r\n                x={0}\r\n                y={0}\r\n                width={70}\r\n                height={60}\r\n                rx={2}\r\n                ry={2}\r\n                className={'Background'}\r\n            />\r\n            {state.board.map((row, i) => row.map((tile, j) => (\r\n                <Tile\r\n                    key={i * 6 + j}\r\n                    tile={tile}\r\n                    x={j * 10}\r\n                    y={i * 10}\r\n                    onClick={() => {\r\n                        const action = j + 1;\r\n                        props.onAction(action);\r\n                    }}\r\n                />\r\n            )))}\r\n        </svg>\r\n    );\r\n};\r\n\r\nexport default Component;\r\n","import Game from '../../interfaces/game';\r\nimport Rules from './rules';\r\nimport Model from './model';\r\nimport Component from './component';\r\nimport GamePlayer, { GamePlayerType } from '../../interfaces/game-player';\r\n\r\nexport default class FourRow implements Game {\r\n    readonly name = 'four-row';\r\n    readonly title = 'Four In A Row';\r\n    readonly rules = new Rules();\r\n    readonly Component = Component;\r\n    readonly players = [\r\n        {type: GamePlayerType.Random},\r\n        {\r\n            type: GamePlayerType.Mcts,\r\n            planCount: 5000\r\n        },\r\n        {\r\n            type: GamePlayerType.Alpha,\r\n            planCount: 300,\r\n            url: 'https://github.com/morozig/abstract-strategy-games/releases/download/alpha-14/model.json'\r\n        },\r\n    ] as GamePlayer[];\r\n    createModel(parallel = false) {\r\n        return new Model(this.name, this.rules, parallel);\r\n    }\r\n}","import React, { useRef } from 'react';\r\nimport './App.css';\r\nimport Game from '../game';\r\nimport FourRow from '../../games/four-row';\r\n\r\nconst App: React.FC = () => {\r\n    const gameRef = useRef(new FourRow());\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <Game\r\n                game={gameRef.current}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// import run from './train';\r\n// run();\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}