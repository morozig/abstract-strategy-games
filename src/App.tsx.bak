import * as React from 'react';
import './App.css';
import Board from './Board';
import Env from './game/env';
import Channel from './lib/channel';
import Human from './game/agents/human';
import Random from './game/agents/random';
import PureMCTS from './game/agents/puremcts';
import Alphazero from './game/agents/alphazero';

interface AppState {
    player: number;
    board: number[][];
    done: boolean;
}

class App extends React.Component<undefined, AppState> {
    players;
    channelX;
    channelO;
    constructor() {
        super(undefined);
        const { player, board } = Env.init();
        const done = false;
        this.state = { player, board, done };
        this.channelX = new Channel();
        this.channelO = new Channel();
        this.players = [
            // new Human(1, this.channelX),
            new Random(1),
            // new PureMCTS(1),
            // new Human(2, this.channelO)
            // new Random(2)
            // new PureMCTS(2)
            new Alphazero(2)
        ];
        this.run();
    }

    run = async () => {
        while (!this.state.done) {
            const player = this.players[this.state.player - 1];
            const enemy = this.players[2 - this.state.player];
            const action = await player.act();
            enemy.step(action);
            this.setState(state => {
                const [ newState, reward, done ] = Env.step(state, action);
                const { player, board } = newState as { player, board };
                return { player, board, done } as AppState;
            });
        }
    }
    onAction = (action: number) => {
        if (this.state.done) return;
        if (Env.availables(this.state).includes(action)) {
            if (this.state.player === 1) {
                this.channelX.set(action);
            } else {
                this.channelO.set(action);
            }
        };
    }
    render() {
        return (
            <div className="App">
                <Board board = {this.state.board}
                    onAction = {this.onAction}
                    />
            </div>
        );
    }
}

export default App;
